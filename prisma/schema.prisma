generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model auth_token {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id    String   @db.Uuid
  jwt_token  String   @db.VarChar(255)
  expires_at DateTime @db.Timestamp(6)
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  user       user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model error_response {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String   @db.Uuid
  error_code    Int
  error_message String   @db.VarChar(255)
  occurred_at   DateTime @default(now()) @db.Timestamp(6)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  user          user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model organization {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model password_management {
  id                      String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                 String    @db.Uuid
  password_reset_token    String?   @db.VarChar(255)
  password_reset_expires  DateTime? @db.Timestamp(6)
  password_updated_at     DateTime? @db.Timestamp(6)
  passwordless_token      String?   @db.VarChar(255)
  multi_factor_auth_token String?   @db.VarChar(255)
  created_at              DateTime  @default(now()) @db.Timestamp(6)
  updated_at              DateTime  @default(now()) @db.Timestamp(6)
  user                    user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model profile {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  first_name   String    @db.VarChar(255)
  last_name    String    @db.VarChar(255)
  dob          DateTime? @db.Timestamp(6)
  address      String?   @db.VarChar(255)
  phone_number String?   @db.VarChar(15)
  user_id      String    @db.Uuid
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String                @unique @db.VarChar(255)
  firstName           String?               @db.VarChar(255)
  lastName            String?               @db.VarChar(255)
  roq_user_id         String                @db.VarChar(255)
  tenant_id           String                @db.VarChar(255)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  auth_token          auth_token[]
  error_response      error_response[]
  organization        organization[]
  password_management password_management[]
  profile             profile[]
}
